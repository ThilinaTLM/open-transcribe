name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Fast syntax and lint checks
  check:
    name: Check & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 🗂️ Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: 📦 Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libasound2-dev

      - name: 🔍 Check formatting
        run: cargo fmt --all -- --check

      - name: 🔍 Check compilation
        run: cargo check --all-targets --all-features

      - name: 📎 Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Parallel builds for Linux, Linux CUDA, and Windows
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            deps: sudo apt-get update -qq && sudo apt-get install -y libasound2-dev
            features: ""
          - name: x86_64-unknown-linux-gnu-cuda
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            deps: sudo apt-get update -qq && sudo apt-get install -y libasound2-dev
            features: "whisper-rs/cuda"
            cuda: true
          - name: x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
            os: windows-latest
            deps: ""
            features: ""

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 🗂️ Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: 🎯 Install CUDA Toolkit
        if: matrix.cuda == true
        uses: Jimver/cuda-toolkit@v0.2.25
        with:
          cuda: "12.5.0"
          method: "network"

      - name: 📦 Install system dependencies
        if: matrix.deps != ''
        run: ${{ matrix.deps }}

      - name: 🔨 Build
        shell: bash
        run: |
          if [[ "${{ matrix.features }}" != "" ]]; then
            cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
