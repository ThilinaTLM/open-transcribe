name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            deps: sudo apt-get update -qq && sudo apt-get install -y libasound2-dev lld
            features: ""
            rustflags: "-C codegen-units=1 -C target-cpu=native -C link-arg=-fuse-ld=lld"
            artifact_name: "binaries-x86_64-unknown-linux-gnu"
            binary_name: "open-transcribe-x86_64-unknown-linux-gnu"
          - name: x86_64-unknown-linux-gnu-cuda
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            deps: sudo apt-get update -qq && sudo apt-get install -y libasound2-dev lld
            features: "whisper-rs/cuda"
            cuda: true
            rustflags: "-C codegen-units=1 -C target-cpu=native -C link-arg=-fuse-ld=lld"
            artifact_name: "binaries-x86_64-unknown-linux-gnu-cuda"
            binary_name: "open-transcribe-x86_64-unknown-linux-gnu-cuda"
          - name: x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
            os: windows-latest
            deps: ""
            features: ""
            rustflags: "-C codegen-units=1 -C target-cpu=native"
            artifact_name: "binaries-x86_64-pc-windows-msvc"
            binary_name: "open-transcribe-x86_64-pc-windows-msvc.exe"

    env:
      RUSTFLAGS: ${{ matrix.rustflags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 🗂️ Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: 🎯 Install CUDA Toolkit
        if: matrix.cuda == true
        uses: Jimver/cuda-toolkit@v0.2.11
        with:
          cuda: "12.2"
          method: "network"

      - name: 📦 Install system dependencies
        if: matrix.deps != ''
        run: ${{ matrix.deps }}

      - name: 🔨 Build
        shell: bash
        run: |
          if [[ "${{ matrix.features }}" != "" ]]; then
            cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: 📦 Package binary
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/open-transcribe.exe \
               dist/${{ matrix.binary_name }}
          else
            cp target/${{ matrix.target }}/release/open-transcribe \
               dist/${{ matrix.binary_name }}
          fi

      - name: 🚀 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
